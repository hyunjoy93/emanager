<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.framework.cmm.mapper.CtlMapper">

	<select id="selectCtlList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT /* com.framework.ctl.mapper.CtlMapper.selectCtlList */
               COUNT(*) OVER() AS total_count
             , (CASE WHEN CAST(#{pageNo}AS INTEGER) * CAST(#{pageSize}AS INTEGER) <![CDATA[ < ]]> COUNT(*) OVER() THEN 'Y' WHEN CAST(#{pageNo}AS INTEGER) * CAST(#{pageSize}AS INTEGER) <![CDATA[ >= ]]> COUNT(*) OVER() THEN 'N' END) AS next_page_yn
             , A.user_id
             , A.user_password
             , A.user_group
             , A.user_name
             , A.user_depart
             , A.last_login
             , <![CDATA[
               '<button type="button" class="bt bd primary user-update">수정</button> <button type="button" class="bt bd user-delete">삭제</button>'
               ]]> AS btn_upd_del
          FROM cmon_user A
         WHERE 1=1   
			<if test = 'keyword != null and keyword != ""'>
	         	<if test = 'searchType.equals("userId")'>
	         		AND A.user_id LIKE '%'||#{keyword}||'%'
	         	</if>
	         	<if test = 'searchType.equals("userName")'>
	         		AND A.user_name LIKE '%'||#{keyword}||'%'
	         	</if>
	         	<if test = 'searchType.equals("userDepart")'>
	         		AND A.user_depart LIKE '%'||#{keyword}||'%'
	         	</if>
	         </if> 
		        <if test = 'userGroup.equals("관리자")'>
		        	AND A.user_group = '관리자'
		        </if>
		        <if test = 'userGroup.equals("운용관제자")'>
		       		AND A.user_group = '운용관제자'
		        </if>
		        <if test = 'userGroup.equals("사용자")'>
		         	AND A.user_group = '사용자'
		        </if>
		        <if test = 'userGroup.equals("승인대기")'>
		         	AND A.user_group = '승인대기'
		        </if>
         	
         LIMIT CAST(#{pageSize} AS INTEGER) OFFSET (CAST(#{pageNo} AS INTEGER) - 1) * CAST(#{pageSize} AS INTEGER)
	</select>


	<select id="selectUserInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT /* com.framework.ctl.mapper.CtlMapper.selectUserInfo */
               A.user_id
             , A.user_password
             , A.user_group
             , A.user_name
             , A.user_depart
             , A.last_login
          FROM cmon_user A
         WHERE 1=1   
		   AND A.user_id = #{loginId}
		   AND A.user_password = #{loginPassword}
	</select>
	
	
	<insert id="insertUser" parameterType="java.util.HashMap">
		INSERT INTO cmon_user 
		(
		       user_id
		     , user_password 
			 , user_name
			 , user_depart
             , user_group
		)
        VALUES
		(
        	  #{popUserId}
        	, 'hKdwzuzRUIRAfKFoz1aFmRGjaGdbHyuo1/+wr4VTKNY='
        	, #{popUserName}
        	, #{popUserDepart}
        	, #{popUserGroup}
		)
	</insert>
	
	<insert id="insertLdapUser" parameterType="java.util.HashMap">
        INSERT INTO cmon_user
			(
			       user_id
			     , user_password 
				 , user_name
				 , user_depart
		         , user_group
			)
	    VALUES
			(
		       	  #{loginId}
		       	, #{loginPassword}
		       	, #{userName}
		   		<if test = 'userDepart.equals("")'>
		       	, null
		   		</if>
		   		<if test = '!userDepart.equals("")'>
		       	, #{userDepart}
		   		</if>
		       	, '승인대기'
			)
			ON CONFLICT (user_id) DO UPDATE SET user_password = #{loginPassword}
	</insert>
	
	<select id="idCheck" parameterType="java.util.HashMap" resultType="int">
		SELECT COUNT(*) FROM cmon_user A
		WHERE A.user_id = #{regUserId}
	</select>
	
	
	<update id="updateUser" parameterType="java.util.HashMap">
		UPDATE cmon_user
		   SET user_name = #{updUserName}
		     , user_group = #{updUserGroup}
		   	 , user_depart = #{updUserDepart}
		 WHERE user_id = #{updUserId}
	</update>
	
	
	<delete id="deleteUser" parameterType="java.util.HashMap">
		DELETE FROM cmon_user
		WHERE user_id = #{delUserId} 
	</delete>
	
	
	<select id="selectSmsUserList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
         SELECT COUNT(*) OVER() AS total_count
              , (CASE WHEN CAST(#{pageNo}AS INTEGER) * CAST(#{pageSize}AS INTEGER) <![CDATA[ < ]]> COUNT(*) OVER() THEN 'Y' WHEN CAST(#{pageNo}AS INTEGER) * CAST(#{pageSize}AS INTEGER) <![CDATA[ >= ]]> COUNT(*) OVER() THEN 'N' END) AS next_page_yn
              , A.zabbix_ip
              , A.user_depart
              , A.user_id
              , A.user_name
              , A.user_phone
              , A.user_mail
              , <![CDATA[
               '<button type="button" class="bt bd primary sms-user-update">수정</button> <button type="button" class="bt bd sms-user-delete">삭제</button>'
               ]]> AS sms_user_upd
           FROM sms_user_contact A   
		  WHERE 1 = 1    
	   ORDER BY A.user_id DESC      
          LIMIT CAST(#{pageSize} AS INTEGER) OFFSET (CAST(#{pageNo} AS INTEGER) - 1) * CAST(#{pageSize} AS INTEGER)
	</select>
	
	<insert id="insertSmsUser" parameterType="java.util.HashMap">
		INSERT INTO sms_user_contact 
		(
		       zabbix_ip
		     , user_depart
			 , user_id
			 , user_name
             , user_phone
             , user_mail
		)
        VALUES
		(
        	  #{popSmsZabbixIp}
        	, #{popSmsUserDepart}  
        	, #{popSmsUserId}
        	, #{popSmsUserName}
        	, #{popSmsUserPhone}
        	, #{popSmsUserMail}
		)
	</insert>
		
	<update id="smsUpdateUser" parameterType="java.util.HashMap">
		UPDATE sms_user_contact
		   SET zabbix_ip = #{smsUserZabbixIp}
		     , user_depart = #{smsUserDepart}
		   	 , user_id = #{smsUserId}
		   	 , user_name = #{smsUserName}
		   	 , user_phone = #{smsUserPhone}
		   	 , user_mail = #{smsUserMail}
		 WHERE user_id = #{smsUserId}
	</update>
	
	
	<select id="selectSmsList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
         SELECT COUNT(*) OVER() AS total_count
              , (CASE WHEN CAST(#{pageNo}AS INTEGER) * CAST(#{pageSize}AS INTEGER) <![CDATA[ < ]]> COUNT(*) OVER() THEN 'Y' WHEN CAST(#{pageNo}AS INTEGER) * CAST(#{pageSize}AS INTEGER) <![CDATA[ >= ]]> COUNT(*) OVER() THEN 'N' END) AS next_page_yn
              , A.zabbix_ip
              , A.host_group_name
              , A.host_name
              , A.host_ip
              , A.event_level
              , A.user_id
              , A.group_name
              , <![CDATA[
               '<button type="button" class="bt bd primary sms-update">수정</button> <button type="button" class="bt bd sms-delete">삭제</button>'
               ]]> AS sms_upd_del
           FROM sms_send_rule A   
		  WHERE 1 = 1 
	   ORDER BY A.user_id DESC		            
          LIMIT CAST(#{pageSize} AS INTEGER) OFFSET (CAST(#{pageNo} AS INTEGER) - 1) * CAST(#{pageSize} AS INTEGER)
	</select>	
	
	<insert id="insertSmsRule" parameterType="java.util.HashMap">
		INSERT INTO sms_send_rule 
		(
		       zabbix_ip
		     , host_group_name
			 , host_name
			 , host_ip
             , event_level
             , user_id
             , group_name
		)
        VALUES
		(
        	  #{smsAddZabbixIp}
        	, #{smsAddHostGroupName}  
        	, #{smsAddHostName}
        	, #{smsAddHostIp}
        	, CAST(#{smsAddEventLevel} AS INTEGER)
        	, #{smsAddUserId}
        	, #{smsAddGroupName}
		)
	</insert>
	
	<update id="smsUpdate" parameterType="java.util.HashMap">
		UPDATE sms_send_rule
		   SET zabbix_ip = #{smsZabbixIp}
		     , host_group_name = #{smsHostGroupName}
		   	 , host_name = #{smsHostName}
		   	 , host_ip = #{smsHostIp}
		   	 , event_level = CAST(#{smsEventLevel} AS INTEGER)
		   	 , user_id = #{smsUserId}
		   	 , group_name = #{smsGroupName}
		 WHERE user_id = #{smsUserId}
	</update>
	
	<delete id="smsDelete" parameterType="java.util.HashMap">
		DELETE FROM sms_send_rule
		WHERE user_id = #{delUserId} 
	</delete>
	
	<delete id="smsUserDelete" parameterType="java.util.HashMap">
		DELETE FROM sms_user_contact
		WHERE user_id = #{delUserId} 
	</delete>


</mapper>
